a := Module load "test.bs".
person := Module load "Person.bs".
pp := person -> :Person; clone("Olle").
pp setName "isak".
System puts pp getName().
System puts a.
System puts a -> :b.
System puts 10 < 20.
System puts "isak" = "isak".
x := 30--40.
x := x map { | d | 
	Proto return d * 10.
	20 * d.
}.

1--10; each { | x | 
	System puts "hej".
}.
file := new("java.io.File", "output.put").
fileWriter := new("java.io.PrintWriter", file).
fileWriter print "Hello world\n".
fileWriter print 86.
fileWriter flush.

f := Java new "java.io.File", "test.bs".
e := f exists.

in := Java new("java.io.BufferedInputStream", Java new("java.io.FileInputStream", "test.bs")).
scanner := Java new ("java.util.Scanner", f).
System puts in markSupported.

System puts e.




line := scanner nextLine.
{scanner hasNextLine.} whileTrue {
	System puts line.
	line := scanner nextLine.
}.

# Print the character after, after, i
System puts ('i' next; next).
('a'--'d') each { | c |
	return('d').
	System puts c.
}.

System puts [1,2,3] map { | d |
	d * 10.
}.

file := File clone "test.bs".
reader := Reader clone file.
line := reader readLine.
System puts line.
{line isNonNil?.} whileTrue {
	System puts line.	
	line := reader readLine.
}.
reader close.



System puts file exist?.

a := System read.
System puts a.

System puts "Test filter".
System puts [1,2,3] filter { | d | d >= 2. }.
System puts "Test filter".
System puts((1 <(2)) and(2 >(0)) or(True)).

System puts 10 next; next; next.

(1--10) each { | x |
  System puts x + 10.
}.

(1--10) each { | y |
   System puts y.
   b := x each { | z |
		System puts z.
		Proto return y.
   }.
   	
   Proto return b.
}.

num := 0.
{num <= 10.} whileTrue {
	System puts num.
	num := num + 1.
}.

(num >= 10) ifTrue {
	System puts "It was true!".
}.

x := True.
{x.} whileTrue {
	System puts "While true".
 	x := False.
}.

e := Proto try {
	[10, 10 + 10] each {| x | 
 	 	System puts xs * 10; * 20.
    }.
}.

e catch :NameError, { | e |
  	System puts "Caught NameError: " + e getMessage().
  	e getStacktrace; each { | s | System puts s.}.
}.

System puts "Reached end".